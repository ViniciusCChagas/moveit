{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/viniciuschagas/Desktop/NLW4/moveit/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currrentExperience = _useState2[0],\n      setCurrrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 1);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randoChallengeindex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randoChallengeindex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      levelUp: levelUp,\n      currrentExperience: currrentExperience,\n      challengesCompleted: challengesCompleted,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ChallengesProvider, \"Z76nM3Yan8qFvhPfTD2uKzWXEhw=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/viniciuschagas/Desktop/NLW4/moveit/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currrentExperience","setCurrrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randoChallengeindex","floor","random","length","challenge","resetChallenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAsBP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC/CJ,QAAQ,CAAC,CAAD,CADuC;AAAA,MAClEK,KADkE;AAAA,MAC3DC,QAD2D;;AAAA,mBAErBN,QAAQ,CAAC,CAAD,CAFa;AAAA,MAElEO,kBAFkE;AAAA,MAE9CC,qBAF8C;;AAAA,mBAGnBR,QAAQ,CAAC,CAAD,CAHW;AAAA,MAGlES,mBAHkE;AAAA,MAG7CC,sBAH6C;;AAAA,mBAI3BV,QAAQ,CAAC,IAAD,CAJmB;AAAA,MAIlEW,eAJkE;AAAA,MAIjDC,kBAJiD;;AAMzE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAmB;AAClBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA;;AAED,WAASY,iBAAT,GAA6B;AAC5B,QAAMC,mBAAmB,GAAGJ,IAAI,CAACK,KAAL,CAC3BL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MADA,CAA5B;AAIA,QAAMC,SAAS,GAAGrB,UAAU,CAACiB,mBAAD,CAA5B;AACAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACA;;AAED,WAASC,cAAT,GAA0B;AACzBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AAED,sBACC,QAAC,iBAAD,CAAmB,QAAnB;AACC,IAAA,KAAK,EAAE;AACNP,MAAAA,KAAK,EAALA,KADM;AAENW,MAAAA,OAAO,EAAPA,OAFM;AAGNT,MAAAA,kBAAkB,EAAlBA,kBAHM;AAINE,MAAAA,mBAAmB,EAAnBA,mBAJM;AAKNQ,MAAAA,iBAAiB,EAAjBA,iBALM;AAMNN,MAAAA,eAAe,EAAfA,eANM;AAONY,MAAAA,cAAc,EAAdA;AAPM,KADR;AAAA,cAWEnB;AAXF;AAAA;AAAA;AAAA;AAAA,UADD;AAeA;;GAxCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\nimport challenges from '../../challenges.json';\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\ninterface ChallengesProviderProps {\n\tchildren: ReactNode;\n}\n\ninterface ChallengesContextData {\n\tlevel: number;\n\tcurrrentExperience: number;\n\tchallengesCompleted: number;\n\tactiveChallenge: Challenge;\n\tlevelUp: () => void;\n\tstartNewChallenge: () => void;\n\tresetChallenge: () => void;\n}\n\ninterface Challenge {\n\ttype: 'body' | 'eye';\n\tdescription: string;\n\tamount: number;\n}\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n\tconst [level, setLevel] = useState(1);\n\tconst [currrentExperience, setCurrrentExperience] = useState(0);\n\tconst [challengesCompleted, setChallengesCompleted] = useState(0);\n\tconst [activeChallenge, setActiveChallenge] = useState(null);\n\n\tconst experienceToNextLevel = Math.pow((level + 1) * 4, 1);\n\n\tfunction levelUp() {\n\t\tsetLevel(level + 1);\n\t}\n\n\tfunction startNewChallenge() {\n\t\tconst randoChallengeindex = Math.floor(\n\t\t\tMath.random() * challenges.length\n\t\t);\n\n\t\tconst challenge = challenges[randoChallengeindex];\n\t\tsetActiveChallenge(challenge);\n\t}\n\n\tfunction resetChallenge() {\n\t\tsetActiveChallenge(null);\n\t}\n\n\treturn (\n\t\t<ChallengesContext.Provider\n\t\t\tvalue={{\n\t\t\t\tlevel,\n\t\t\t\tlevelUp,\n\t\t\t\tcurrrentExperience,\n\t\t\t\tchallengesCompleted,\n\t\t\t\tstartNewChallenge,\n\t\t\t\tactiveChallenge,\n\t\t\t\tresetChallenge,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</ChallengesContext.Provider>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}